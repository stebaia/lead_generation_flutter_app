import 'package:http/http.dart' as http;
import 'package:lead_generation_flutter_app/model/user_model/login_object.dart';
import 'package:lead_generation_flutter_app/model/user_model/user.dart';
import 'package:lead_generation_flutter_app/network/vivaticket_api.dart';
import 'package:lead_generation_flutter_app/utils_backup/envirorment.dart';
import 'package:lead_generation_flutter_app/utils/debug_helper.dart';
import 'package:xml/xml.dart';
import 'package:xml2json/xml2json.dart';
import 'dart:convert';

class LoginService {
  final myTransformer = Xml2Json();

  Future<User> requestLogin(
      String email, String password, Envirorment envirorment) async {
    // Debug mode: simulate login errors for testing
    if (DebugHelper.shouldSimulateLoginError(email, password)) {
      print("DEBUG: Simulating login error for testing");
      await Future.delayed(Duration(seconds: 1)); // Simulate network delay
      throw DebugHelper.getSimulatedError(email, password);
    }

    var envelope = '''
      <soap12:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope">
        <soap12:Body>
          <LoginUtente xmlns="http://tempuri.org/">
            <email>$email</email>
            <pw>$password</pw>
          </LoginUtente>
        </soap12:Body>
      </soap12:Envelope>
    ''';

    http.Response response =
        await http.post(Uri.parse(VivaticketApi.REQUEST_LOGIN(envirorment)),
            headers: {
              "Content-Type": "text/xml; charset=utf-8",
              //"SOAPAction": "http://tempuri.org/GetAllCity",
              //"Host": "www.i2isoftwares.com"
              "Accept": "text/xml"
            },
            body: envelope);

    // Check HTTP status code
    if (response.statusCode != 200) {
      throw Exception('HTTP ${response.statusCode}: ${response.reasonPhrase}');
    }

    var rawXmlResponse = response.body;
    print("DATAResult=" + response.body);

    // Check if response contains error indicators
    if (rawXmlResponse.contains('soap:Fault') ||
        rawXmlResponse.contains('faultstring') ||
        rawXmlResponse.isEmpty) {
      print("SOAP Fault detected in response");
      throw Exception('Invalid credentials');
    }

    try {
      // Use the xml package's 'parse' method to parse the response.
      XmlDocument customParseXml = XmlDocument.parse(rawXmlResponse);
      myTransformer.parse(rawXmlResponse);
      var jsonResponse = myTransformer.toParker();
      Map<String, dynamic> responseJson = json.decode(jsonResponse);

      print("Parsed JSON: $jsonResponse");

      AutogeneratedLogin loginResponse =
          AutogeneratedLogin.fromJson(responseJson);

      LoginUtenteResult? loginUtenteResult = loginResponse
          .soapEnvelope?.soapBody?.loginUtenteResponse?.loginUtenteResult;

      print("LoginUtenteResult: $loginUtenteResult");

      // Check if login result is null or empty
      if (loginUtenteResult == null ||
          loginUtenteResult.valori == null ||
          loginUtenteResult.valori!.isEmpty) {
        print("Login result is null or empty - Invalid credentials");
        throw Exception('Invalid credentials');
      }

      print("Valori array: ${loginUtenteResult.valori}");
      print("First value: ${loginUtenteResult.valori![0].value}");

      // Check if the first value (user ID) is valid
      // Many SOAP services return "0" or "-1" for invalid credentials
      if (loginUtenteResult.valori![0].value == null ||
          loginUtenteResult.valori![0].value == "0" ||
          loginUtenteResult.valori![0].value == "-1" ||
          loginUtenteResult.valori![0].value!.isEmpty ||
          loginUtenteResult.valori![0].value!.toLowerCase().contains('error') ||
          loginUtenteResult.valori![0].value!
              .toLowerCase()
              .contains('invalid')) {
        print(
            "Invalid user ID detected: ${loginUtenteResult.valori![0].value}");
        throw Exception('Invalid credentials');
      }

      // Additional check: ensure we have enough values and they're valid
      if (loginUtenteResult.valori!.length < 4) {
        print("Not enough values in response - Invalid credentials");
        throw Exception('Invalid credentials');
      }

      // Check if userType is valid (should be a number > 0)
      try {
        int userType = int.parse(loginUtenteResult.valori![3].value!);
        if (userType <= 0) {
          print("Invalid user type: $userType");
          throw Exception('Invalid credentials');
        }
      } catch (e) {
        print("Error parsing user type: ${loginUtenteResult.valori![3].value}");
        throw Exception('Invalid credentials');
      }

      print(
          "Login successful for user ID: ${loginUtenteResult.valori![0].value}");

      return User(
          id: int.parse(loginUtenteResult.valori![0].value!),
          email: email,
          password: password,
          userType: int.parse(loginUtenteResult.valori![3].value!),
          manifestationId: int.parse(loginUtenteResult.valori![1].value!),
          manifestationName: loginUtenteResult.valori![1].description!);
    } catch (e) {
      print("Exception in login parsing: $e");
      if (e.toString().contains('Invalid credentials')) {
        rethrow;
      }
      // If it's a parsing error, it's likely due to invalid credentials
      throw Exception('Invalid credentials');
    }
  }
}
